"""
Sentinel Watchdog‚Ñ¢ - √Ñlykk√§√§n k√§ytt√§ytymismallin mukaan toimiva 100k‚Ç¨ tavoitteen valvoja

Sis√§lt√§√§:
- Tilanneanalyysi (Situation Room -logiikka)
- Toimenpidemoodit (passiivinen/aktiivinen/aggressiivinen/h√§t√§tila)
- Motivoiva kommunikaatio (henkil√∂kohtainen valmentaja)
- Autonominen ehdotusmoottori (Goal Survival Engine)
- H√§t√§tila-protokolla
"""
from datetime import datetime, timedelta
from typing import Dict, Any, List
from sqlalchemy.orm import Session
from ..models.transaction import Transaction
from ..models.user import User
from ..models.category import Category
import logging
import statistics
from enum import Enum

logger = logging.getLogger(__name__)

class WatchdogMode(Enum):
    """Sentinel Watchdog toimenpidemoodit"""
    PASSIVE = "passive"          # üü¢ Valpas seuraaja
    ACTIVE = "active"           # üü° Aktiivinen pakottaja  
    AGGRESSIVE = "aggressive"   # üî¥ Panikoiva assistentti
    EMERGENCY = "emergency"     # ‚ö´ H√§t√§tila

class RiskLevel(Enum):
    """Riskitasot tavoitteen saavuttamiselle"""
    LOW = "low"           # 0.0-0.3
    MODERATE = "moderate" # 0.3-0.6
    HIGH = "high"        # 0.6-0.8
    CRITICAL = "critical" # 0.8-1.0

class SentinelWatchdogService:
    """
    Sentinel Watchdog‚Ñ¢ - √Ñlykk√§√§n k√§ytt√§ytymismallin 100k‚Ç¨ valvoja
    
    Toimii kuin henkil√∂kohtainen talousvalmentaja, joka:
    - Analysoi jatkuvasti tilannetta (Situation Room)
    - Vaihtaa toimintamoodia riskitason mukaan
    - Kommunikoi motivoivasti ja konkreettisesti
    - Tekee autonomisia ehdotuksia selviytymiseksi
    - H√§lytt√§√§ kriittisiss√§ tilanteissa
    """
    
    def __init__(self):
        self.target_amount = 100000  # 100k‚Ç¨ tavoite
        
        # Toimintamoodien kynnysarvot riskipistem√§√§r√§n mukaan
        self.mode_thresholds = {
            WatchdogMode.PASSIVE: 0.4,      # 0.0-0.4 = passiivinen
            WatchdogMode.ACTIVE: 0.65,      # 0.4-0.65 = aktiivinen
            WatchdogMode.AGGRESSIVE: 0.85,  # 0.65-0.85 = aggressiivinen
            WatchdogMode.EMERGENCY: 1.0     # 0.85-1.0 = h√§t√§tila
        }
    
    def analyze_situation_room(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        üß† Tilanneanalyysi (Situation Room -logiikka)
        
        Laskee jatkuvasti:
        - Todellinen s√§√§st√∂taso vs. tavoitteen vaatima s√§√§st√∂vauhti
        - Poikkeamat budjetista ajassa (7pv, 30pv, 90pv)
        - Riskimittari (tulojen volatiliteetti + ennakoidut menot + tavoite-ep√§varmuus)
        """
        try:
            # Hae k√§ytt√§j√§n tiedot
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return {"status": "error", "message": "K√§ytt√§j√§√§ ei l√∂ytynyt"}
            
            # Analysoi eri aikajaksot
            analysis_periods = {"7d": 7, "30d": 30, "90d": 90}
            situation_data = {}
            
            for period_name, days in analysis_periods.items():
                end_date = datetime.now()
                start_date = end_date - timedelta(days=days)
                
                transactions = db.query(Transaction).filter(
                    Transaction.user_id == user_id,
                    Transaction.transaction_date >= start_date
                ).all()
                
                # Laske tulot ja menot
                income_transactions = [abs(t.amount) for t in transactions if t.amount < 0]
                expense_transactions = [t.amount for t in transactions if t.amount > 0]
                
                total_income = sum(income_transactions)
                total_expenses = sum(expense_transactions)
                net_savings = total_income - total_expenses
                
                # Laske volatiliteetti (tulojen ja kulujen vaihtelevuus)
                income_volatility = statistics.stdev(income_transactions) if len(income_transactions) > 1 else 0
                expense_volatility = statistics.stdev(expense_transactions) if len(expense_transactions) > 1 else 0
                
                situation_data[period_name] = {
                    "total_income": total_income,
                    "total_expenses": total_expenses,
                    "net_savings": net_savings,
                    "daily_savings": net_savings / days if days > 0 else 0,
                    "income_volatility": income_volatility,
                    "expense_volatility": expense_volatility,
                    "transaction_count": len(transactions)
                }
            
            # Laske tavoitteen vaatima s√§√§st√∂vauhti
            required_monthly_savings = self.target_amount / (5 * 12)  # 5 vuotta aikaa
            current_monthly_savings = situation_data["30d"]["net_savings"]
            savings_gap = required_monthly_savings - current_monthly_savings
            
            # Laske riskimittari (0.0-1.0)
            risk_score = self._calculate_risk_score(situation_data, savings_gap, required_monthly_savings)
            risk_level = self._determine_risk_level(risk_score)
            watchdog_mode = self._determine_watchdog_mode(risk_score)
            
            return {
                "status": "success",
                "analysis_timestamp": datetime.now().isoformat(),
                "situation_data": situation_data,
                "target_analysis": {
                    "target_amount": self.target_amount,
                    "required_monthly_savings": required_monthly_savings,
                    "current_monthly_savings": current_monthly_savings,
                    "savings_gap": savings_gap,
                    "gap_percentage": (savings_gap / required_monthly_savings) * 100 if required_monthly_savings > 0 else 0
                },
                "risk_assessment": {
                    "risk_score": risk_score,
                    "risk_level": risk_level.value,
                    "watchdog_mode": watchdog_mode.value
                }
            }
            
        except Exception as e:
            logger.error(f"Virhe tilanneanalyysiss√§: {e}")
            return {"status": "error", "message": str(e)}
    
    def _calculate_risk_score(self, situation_data: Dict, savings_gap: float, required_savings: float) -> float:
        """
        Laske riskimittari (0.0-1.0) joka yhdist√§√§:
        - S√§√§st√∂vaje (40% painoarvo)
        - Tulojen volatiliteetti (25% painoarvo)
        - Kulujen volatiliteetti (20% painoarvo)
        - Trendin suunta (15% painoarvo)
        """
        try:
            # 1. S√§√§st√∂vaje-riski (40% painoarvo)
            if required_savings > 0:
                savings_risk = min(abs(savings_gap) / required_savings, 1.0)
            else:
                savings_risk = 0.0
            
            # 2. Tulojen volatiliteetti-riski (25% painoarvo)
            avg_income = situation_data["30d"]["total_income"] / 30
            income_volatility = situation_data["30d"]["income_volatility"]
            income_risk = min(income_volatility / max(avg_income, 1), 1.0) if avg_income > 0 else 0.5
            
            # 3. Kulujen volatiliteetti-riski (20% painoarvo)
            avg_expenses = situation_data["30d"]["total_expenses"] / 30
            expense_volatility = situation_data["30d"]["expense_volatility"]
            expense_risk = min(expense_volatility / max(avg_expenses, 1), 1.0) if avg_expenses > 0 else 0.5
            
            # 4. Trendin suunta-riski (15% painoarvo)
            # Vertaa 7pv vs 30pv s√§√§st√∂j√§
            recent_trend = situation_data["7d"]["daily_savings"]
            monthly_trend = situation_data["30d"]["daily_savings"]
            
            if monthly_trend > 0:
                trend_risk = max(0, (monthly_trend - recent_trend) / monthly_trend)
            else:
                trend_risk = 0.8  # Korkea riski jos ei s√§√§st√∂j√§
            
            # Yhdist√§ painotetusti
            total_risk = (
                savings_risk * 0.40 +
                income_risk * 0.25 +
                expense_risk * 0.20 +
                trend_risk * 0.15
            )
            
            return min(max(total_risk, 0.0), 1.0)  # Varmista 0.0-1.0 v√§lill√§
            
        except Exception as e:
            logger.error(f"Virhe riskimittarin laskennassa: {e}")
            return 0.5  # Keskiarvo jos laskenta ep√§onnistuu
    
    def _determine_risk_level(self, risk_score: float) -> RiskLevel:
        """M√§√§rit√§ riskitaso pistem√§√§r√§n perusteella"""
        if risk_score <= 0.3:
            return RiskLevel.LOW
        elif risk_score <= 0.6:
            return RiskLevel.MODERATE
        elif risk_score <= 0.8:
            return RiskLevel.HIGH
        else:
            return RiskLevel.CRITICAL
    
    def _determine_watchdog_mode(self, risk_score: float) -> WatchdogMode:
        """M√§√§rit√§ Watchdog-toimintamoodi riskipistem√§√§r√§n perusteella"""
        if risk_score <= self.mode_thresholds[WatchdogMode.PASSIVE]:
            return WatchdogMode.PASSIVE
        elif risk_score <= self.mode_thresholds[WatchdogMode.ACTIVE]:
            return WatchdogMode.ACTIVE
        elif risk_score <= self.mode_thresholds[WatchdogMode.AGGRESSIVE]:
            return WatchdogMode.AGGRESSIVE
        else:
            return WatchdogMode.EMERGENCY
    
    def get_watchdog_communication(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        ü§ñ Motivoiva kommunikaatio - Agentti puhuu kuin henkil√∂kohtainen valmentaja
        
        Sentinel ei ainoastaan n√§yt√§ lukemia. Se puhuu k√§ytt√§j√§n kanssa ja esitt√§√§ konkreettisia toimia.
        """
        situation = self.analyze_situation_room(user_id, db)
        
        if situation["status"] != "success":
            return situation
        
        watchdog_mode = WatchdogMode(situation["risk_assessment"]["watchdog_mode"])
        savings_gap = situation["target_analysis"]["savings_gap"]
        
        # Valitse kommunikaatiotyyli moodin mukaan
        communication = self._generate_mode_communication(watchdog_mode, savings_gap)
        
        return {
            "status": "success",
            "watchdog_mode": watchdog_mode.value,
            "risk_level": situation["risk_assessment"]["risk_level"],
            "communication": communication,
            "timestamp": datetime.now().isoformat()
        }
    
    def _generate_mode_communication(self, mode: WatchdogMode, gap: float) -> Dict[str, Any]:
        """Luo kommunikaatio moodin mukaan"""
        
        if mode == WatchdogMode.PASSIVE:
            return {
                "mood": "üòä",
                "tone": "encouraging",
                "message": "Hyv√§√§ ty√∂t√§! Olet oikealla tiell√§ 100k‚Ç¨ tavoitteeseen. Jatka n√§in!",
                "daily_action": "Tarkista p√§iv√§n kulut ja nauti onnistumisestasi",
                "weekly_suggestion": "Harkitse kuukausis√§√§st√∂jen nostamista ‚Ç¨50-100 optimoimiseksi",
                "urgency": "none",
                "communication_frequency": "weekly"
            }
        
        elif mode == WatchdogMode.ACTIVE:
            return {
                "mood": "üí™",
                "tone": "motivational",
                "message": f"Tarvitsemme {abs(gap):.0f}‚Ç¨/kk lis√§√§ tavoitteen saavuttamiseksi. T√§ss√§ konkreettiset vaihtoehdot:",
                "daily_action": "Etsi yksi turha kulu t√§n√§√§n ja poista se",
                "weekly_suggestion": "Analysoi suurimmat kuluryhm√§t ja leikkaa 10-15%",
                "action_plan": [
                    "üîç Etsi lis√§tuloja: freelance, sivuty√∂ (+‚Ç¨200-400/kk)",
                    "‚úÇÔ∏è Leikkaa kuluja: tilaukset, ravintolat (-‚Ç¨100-200/kk)",
                    "üìà Optimoi sijoitukset: indeksirahastot (5-7% tuotto)"
                ],
                "urgency": "moderate",
                "communication_frequency": "bi-weekly"
            }
        
        elif mode == WatchdogMode.AGGRESSIVE:
            return {
                "mood": "üò§",
                "tone": "urgent",
                "message": f"VAROITUS: Tavoite on vakavassa vaarassa! Tarvitsemme {abs(gap):.0f}‚Ç¨/kk HETI. Toimenpiteet v√§ltt√§m√§tt√∂mi√§:",
                "daily_action": "P√ÑIVITT√ÑINEN TEHT√ÑV√Ñ: L√§het√§ 1 ty√∂hakemus tai myy 1 turha tavara",
                "weekly_suggestion": "VIIKOTTAINEN PAKKO: Leikkaa ‚Ç¨50 kuluista ja etsi ‚Ç¨100 lis√§tuloja",
                "action_plan": [
                    "üö® HETI: Rekister√∂idy Wolt/Foodora kuljettajaksi",
                    "üö® T√ÑN√Ñ√ÑN: Peruuta kaikki ei-v√§ltt√§m√§tt√∂m√§t tilaukset",
                    "üö® VIIKOSSA: Myy k√§ytt√§m√§tt√∂m√§t tavarat Tori.fi:ss√§",
                    "üö® KUUKAUDESSA: Neuvottele palkankorotus tai vaihda ty√∂paikkaa"
                ],
                "urgency": "high",
                "communication_frequency": "daily"
            }
        
        else:  # EMERGENCY
            return {
                "mood": "üö®",
                "tone": "emergency",
                "message": "H√ÑT√ÑTILA AKTIVOITU! 100k‚Ç¨ tavoite ep√§onnistuu ilman v√§litt√∂mi√§ radikaaleja toimia!",
                "daily_action": "KRIITTINEN: Tee v√§hint√§√§n 2 konkreettista toimea p√§iv√§ss√§ s√§√§st√∂jen lis√§√§miseksi",
                "weekly_suggestion": "PAKOLLINEN: Toteuta h√§t√§suunnitelma kokonaisuudessaan",
                "emergency_protocol": {
                    "immediate_actions": [
                        "‚ö´ TULOT: Aloita kaikki mahdolliset sivuty√∂t T√ÑN√Ñ√ÑN",
                        "‚ö´ KULUT: Leikkaa KAIKKI ei-v√§ltt√§m√§tt√∂m√§t menot",
                        "‚ö´ MYYNTI: Realisoi kaikki turhat omaisuudet",
                        "‚ö´ ASUMINEN: Harkitse halvempaa asuntoa/kimppak√§mpp√§√§",
                        "‚ö´ LIIKKUMINEN: Myy auto, k√§yt√§ julkisia"
                    ],
                    "budget_lockdown": True,
                    "spending_limits": {
                        "entertainment": 0,
                        "dining_out": 0,
                        "shopping": 50,  # Vain v√§ltt√§m√§t√∂n
                        "transport": 100
                    }
                },
                "urgency": "critical",
                "communication_frequency": "daily_multiple"
            }
    
    def generate_survival_suggestions(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        üîç Autonominen ehdotusmoottori (Goal Survival Engine)
        
        Analysoi k√§ytt√§j√§n tiedot ja tekee konkreettisia ehdotuksia:
        - Skannaa transaktiot ja l√∂yt√§√§ s√§√§st√∂kohteet
        - Analysoi toistuvia maksuja
        - Ehdottaa lis√§tulokeinoja
        - Luo konkreettisia toimintasuunnitelmia
        """
        try:
            situation = self.analyze_situation_room(user_id, db)
            if situation["status"] != "success":
                return situation
            
            watchdog_mode = WatchdogMode(situation["risk_assessment"]["watchdog_mode"])
            
            # Hae viimeisen 90 p√§iv√§n transaktiot kategorisoituna
            end_date = datetime.now()
            start_date = end_date - timedelta(days=90)
            
            transactions = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_date >= start_date,
                Transaction.amount > 0  # Vain kulut
            ).all()
            
            # Analysoi kategorioittain
            category_analysis = {}
            for transaction in transactions:
                category_id = transaction.category_id or 0
                if category_id not in category_analysis:
                    category_analysis[category_id] = {
                        "total": 0,
                        "count": 0,
                        "transactions": []
                    }
                category_analysis[category_id]["total"] += transaction.amount
                category_analysis[category_id]["count"] += 1
                category_analysis[category_id]["transactions"].append(transaction)
            
            suggestions = []
            
            # Kulus√§√§st√∂ehdotukset (top 3 kategoriaa)
            for category_id, data in sorted(category_analysis.items(), key=lambda x: x[1]["total"], reverse=True)[:3]:
                monthly_spend = data["total"] / 3  # 90 p√§iv√§√§ -> kuukausi
                if monthly_spend > 100:  # Vain merkitt√§v√§t kulut
                    category = db.query(Category).filter(Category.id == category_id).first()
                    category_name = category.name if category else f"Kategoria {category_id}"
                    
                    suggestions.append({
                        "type": "expense_reduction",
                        "category": category_name,
                        "current_spend": monthly_spend,
                        "potential_savings": monthly_spend * 0.3,  # 30% s√§√§st√∂potentiaali
                        "actions": self._get_category_actions(category_name),
                        "urgency": watchdog_mode.value,
                        "estimated_timeline": "2-4 viikkoa"
                    })
            
            # Lis√§tulo-ehdotukset
            income_suggestions = [
                {
                    "type": "income_increase",
                    "category": "Gig Economy",
                    "potential_income": 300,
                    "actions": [
                        "Rekister√∂idy Wolt/Foodora kuljettajaksi",
                        "Aja Uber/Bolt viikonloppuisin",
                        "Tarjoa siivous-/puutarhapalveluja naapurustossa"
                    ],
                    "urgency": watchdog_mode.value,
                    "estimated_timeline": "1 viikko"
                },
                {
                    "type": "income_increase",
                    "category": "Freelance & Konsultointi",
                    "potential_income": 400,
                    "actions": [
                        "Tarjoa osaamistasi Fiverr/Upwork -alustoilla",
                        "Konsultoi omalla alallasi viikonloppuisin",
                        "Opeta taitojasi online-kurssien muodossa"
                    ],
                    "urgency": watchdog_mode.value,
                    "estimated_timeline": "2-4 viikkoa"
                },
                {
                    "type": "income_increase",
                    "category": "Myynti & Kierr√§tys",
                    "potential_income": 200,
                    "actions": [
                        "Myy k√§ytt√§m√§tt√∂m√§t tavarat Tori.fi:ss√§",
                        "Kierr√§t√§ vaatteet Vinted-palvelussa",
                        "Myy kirjat ja pelit verkossa"
                    ],
                    "urgency": watchdog_mode.value,
                    "estimated_timeline": "1-2 viikkoa"
                }
            ]
            suggestions.extend(income_suggestions)
            
            return {
                "status": "success",
                "analysis_period": "90 days",
                "suggestions": suggestions[:8],  # Top 8 ehdotusta
                "generated_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Virhe ehdotusmoottorin ajossa: {e}")
            return {"status": "error", "message": str(e)}
    
    def _get_category_actions(self, category_name: str) -> List[str]:
        """Luo kategoria-spesifisi√§ toimintaehdotuksia"""
        category_lower = category_name.lower()
        
        if "ruoka" in category_lower or "ravintola" in category_lower:
            return [
                "Kokkaile kotona 5 p√§iv√§√§ viikossa",
                "K√§yt√§ ruokaostoksissa budjetti ‚Ç¨50/viikko",
                "Lounaalla ty√∂paikkaruokala vs. ravintolat",
                "Valmista isompia annoksia ja pakasta"
            ]
        elif "liikenne" in category_lower or "auto" in category_lower:
            return [
                "Vaihda julkisiin kulkuneuvoihin 3 p√§iv√§√§ viikossa",
                "Kimppakyydit ty√∂matkoihin",
                "Py√∂r√§ile lyhyet matkat (alle 5km)",
                "Harkitse auton myynti√§ jos k√§ytt√∂ v√§h√§ist√§"
            ]
        elif "viihde" in category_lower or "harrastus" in category_lower:
            return [
                "Peruuta k√§ytt√§m√§tt√∂m√§t streaming-palvelut",
                "Vaihda kalliit harrastukset ilmaisiin (kuntosali ‚Üí ulkoilu)",
                "K√§yt√§ kirjastoa viihteen l√§hteen√§",
                "J√§rjest√§ kotibileit√§ ravintolan sijaan"
            ]
        else:
            return [
                "Analysoi kulujen v√§ltt√§m√§tt√∂myys",
                "Etsi halvempia vaihtoehtoja",
                "Aseta kuukausittainen kuluraja kategoriale"
            ]
    
    def get_emergency_protocol(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        ‚ö´ H√§t√§tila-protokolla - Kun tavoite on kriittisess√§ vaarassa
        
        Voi ehdottaa:
        - Budjetin kategorioiden sulkemista
        - K√§yt√∂n lukitsemista tietyille tileille  
        - H√§t√§kassastrategiaa
        """
        situation = self.analyze_situation_room(user_id, db)
        
        if situation["status"] != "success":
            return situation
        
        watchdog_mode = WatchdogMode(situation["risk_assessment"]["watchdog_mode"])
        
        if watchdog_mode != WatchdogMode.EMERGENCY:
            return {
                "status": "not_required",
                "message": "H√§t√§tila-protokolla ei ole tarpeen t√§ll√§ hetkell√§",
                "current_mode": watchdog_mode.value
            }
        
        # Luo h√§t√§tila-protokolla
        emergency_protocol = {
            "status": "EMERGENCY_ACTIVATED",
            "activation_time": datetime.now().isoformat(),
            "severity": "CRITICAL",
            "immediate_lockdown": {
                "budget_categories_locked": [
                    "viihde", "ravintolat", "vaatteet", "harrastukset", "matkailu"
                ],
                "spending_limits": {
                    "p√§ivitt√§inen_max": 50,
                    "viikottainen_max": 200,
                    "kuukausittainen_max": 800
                },
                "approval_required_over": 25  # Yli 25‚Ç¨ ostot vaativat vahvistuksen
            },
            "mandatory_actions": [
                {
                    "priority": 1,
                    "action": "TULONLIS√ÑYS PAKOLLINEN",
                    "deadline": "7 p√§iv√§√§",
                    "target": "+‚Ç¨500/kk",
                    "methods": [
                        "Aloita kuljetus-/gig-ty√∂t T√ÑN√Ñ√ÑN",
                        "Myy kaikki turhat omaisuudet 1 viikossa",
                        "Neuvottele palkankorotus/lis√§tunnit HETI"
                    ]
                },
                {
                    "priority": 2,
                    "action": "KULUJEN RADIKAALI LEIKKAUS",
                    "deadline": "3 p√§iv√§√§", 
                    "target": "-‚Ç¨400/kk",
                    "methods": [
                        "Peruuta KAIKKI tilaukset (Netflix, Spotify, etc.)",
                        "Sy√∂ vain kotona 30 p√§iv√§√§",
                        "K√§yt√§ vain julkisia kulkuneuvoja",
                        "Harkitse asunnon vaihtoa halvempaan"
                    ]
                }
            ],
            "communication_protocol": {
                "frequency": "DAILY",
                "channels": ["streamlit", "email", "telegram"],
                "escalation": {
                    "day_3": "L√§het√§ raportti edistymisest√§",
                    "day_7": "Jos ei edistyst√§ ‚Üí harkitse tavoitteen uudelleenarvointia",
                    "day_14": "Kriittinen arviointi ja uusi strategia"
                }
            },
            "success_metrics": {
                "weekly_savings_increase": 200,
                "monthly_income_increase": 500,
                "expense_reduction": 400
            }
        }
        
        return {
            "status": "success",
            "emergency_protocol": emergency_protocol,
            "estimated_recovery_time": "2-4 viikkoa intensiivist√§ toimintaa"
        } 