"""
Sentinel Guardian Service - Aktiivinen 100k‚Ç¨ tavoitteen valvonta
Huutaa k√§ytt√§j√§lle kun tavoite on vaarassa ja ehdottaa radikaaleja toimenpiteit√§.
"""
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from sqlalchemy.orm import Session
from ..models.transaction import Transaction
from ..models.goal import Goal
from ..models.user import User
import logging

logger = logging.getLogger(__name__)

class SentinelGuardianService:
    """
    Sentinel Guardian - Aktiivinen 100k‚Ç¨ tavoitteen valvonta ja h√§lytykset.
    Analysoi jatkuvasti k√§ytt√§j√§n taloudellista tilannetta ja huutaa kun tarvitaan toimia.
    """
    
    def __init__(self):
        self.target_amount = 100000  # 100k‚Ç¨ tavoite
        self.critical_threshold = 0.5  # Alle 50% tavoitteesta = kriittinen tilanne
        self.warning_threshold = 0.7   # Alle 70% tavoitteesta = varoitus
        
    def analyze_goal_status(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        Analysoi k√§ytt√§j√§n 100k‚Ç¨ tavoitteen tilan ja palauttaa h√§lytykset.
        """
        try:
            # Hae k√§ytt√§j√§n tiedot
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return {"status": "error", "message": "K√§ytt√§j√§√§ ei l√∂ytynyt"}
            
            # Laske nykyinen s√§√§st√∂jen m√§√§r√§ viimeisen 12kk perusteella
            end_date = datetime.now()
            start_date = end_date - timedelta(days=365)
            
            transactions = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_date >= start_date
            ).all()
            
            # Laske tulot ja menot
            total_income = sum(abs(t.amount) for t in transactions if t.amount < 0)  # Negatiiviset = tulot
            total_expenses = sum(t.amount for t in transactions if t.amount > 0)    # Positiiviset = menot
            monthly_savings = (total_income - total_expenses) / 12
            
            # Arvio nykyisist√§ s√§√§st√∂ist√§ (t√§m√§ tulisi oikeassa toteutuksessa tietokannasta)
            current_savings = max(0, monthly_savings * 12)  # Yksinkertainen arvio
            
            # Laske edistyminen
            progress_percentage = (current_savings / self.target_amount) * 100
            
            # Laske aika tavoitteeseen nykyisell√§ s√§√§st√∂tahdilla
            if monthly_savings > 0:
                remaining_amount = self.target_amount - current_savings
                months_to_goal = remaining_amount / monthly_savings
                realistic_timeline = months_to_goal / 12  # vuosissa
            else:
                months_to_goal = float('inf')
                realistic_timeline = float('inf')
            
            # Analysoi tilanne ja luo h√§lytykset
            alerts = self._generate_alerts(
                current_savings=current_savings,
                monthly_savings=monthly_savings,
                progress_percentage=progress_percentage,
                realistic_timeline=realistic_timeline,
                total_income=total_income,
                total_expenses=total_expenses
            )
            
            return {
                "status": "success",
                "current_savings": current_savings,
                "monthly_savings": monthly_savings,
                "progress_percentage": progress_percentage,
                "realistic_timeline": realistic_timeline,
                "target_amount": self.target_amount,
                "alerts": alerts,
                "analysis_date": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Virhe tavoiteanalyysiss√§: {e}")
            return {"status": "error", "message": str(e)}
    
    def _generate_alerts(self, current_savings: float, monthly_savings: float, 
                        progress_percentage: float, realistic_timeline: float,
                        total_income: float, total_expenses: float) -> List[Dict[str, Any]]:
        """
        Luo h√§lytykset ja radikaalit toimenpide-ehdotukset tilanteen mukaan.
        """
        alerts = []
        
        # KRIITTINEN TILANNE - Tavoite vaarassa!
        if progress_percentage < 30 or realistic_timeline > 10:
            alerts.extend([
                {
                    "level": "CRITICAL",
                    "title": "üö® H√ÑLYTYS: 100K‚Ç¨ TAVOITE VAARASSA!",
                    "message": f"Nykyisell√§ tahdilla tavoite kest√§√§ {realistic_timeline:.1f} vuotta. TOIMIA TARVITAAN NYT!",
                    "actions": [
                        "üîç ETSI LIS√ÑT√ñIT√Ñ HETI - Freelance, sivutoimet, viikonloppuduunit",
                        "üíº NEUVOTTELE PALKANKOROTUS - Varaa tapaaminen pomosi kanssa",
                        "üìà SIJOITA P√ñRSSIIN - Aloita kuukausis√§√§st√§minen osakkeisiin",
                        "üè† HARKITSE ASUMISKUSTANNUSTEN PIENENT√ÑMIST√Ñ - Kimppak√§mp√§t, halvempi alue",
                        "üöó MYYD√Ñ AUTO - Julkiset kulkuneuvot s√§√§st√§v√§t tuhansia",
                        "üí° ALOITA SIVUBISNEKSET - Verkkokauppa, konsultointi, opetus"
                    ],
                    "urgency": "immediate"
                }
            ])
        
        # VAROITUS - Tavoite hidastunut
        elif progress_percentage < 50 or realistic_timeline > 7:
            alerts.extend([
                {
                    "level": "WARNING", 
                    "title": "‚ö†Ô∏è VAROITUS: S√§√§st√∂tahti liian hidas",
                    "message": f"Tavoite kest√§√§ {realistic_timeline:.1f} vuotta. Tarvitaan lis√§toimia!",
                    "actions": [
                        "üí∞ NOSTA KUUKAUSIS√Ñ√ÑST√ñJ√Ñ +‚Ç¨200-500",
                        "üîç ETSI LIS√ÑTULOJA - Osa-aikaty√∂, freelance",
                        "‚úÇÔ∏è LEIKKAA KULUJA - Tarkista tilaukset ja turhat menot",
                        "üìà ALOITA SIJOITTAMINEN - Indeksirahastot tuottavat yli s√§√§st√∂tilin",
                        "üéØ ASETA TIUKEMMAT BUDJETTIRAJOITUKSET"
                    ],
                    "urgency": "soon"
                }
            ])
        
        # Spesifiset h√§lytykset kulujen perusteella
        if total_expenses > total_income * 0.8:  # Yli 80% tuloista menee kuluihin
            alerts.append({
                "level": "WARNING",
                "title": "üí∏ KULUT LIIAN KORKEAT",
                "message": f"Kulut {total_expenses:.0f}‚Ç¨ ovat {(total_expenses/total_income)*100:.0f}% tuloistasi!",
                "actions": [
                    "üè† ASUMISKULUT - Suurin yksitt√§inen s√§√§st√∂kohde",
                    "üçΩÔ∏è RUOKAKULUT - Kotona kokkailu vs. ravintolat", 
                    "üöó LIIKKUMINEN - Julkiset vs. auto",
                    "üì± TILAUKSET - Peruuta k√§ytt√§m√§tt√∂m√§t palvelut",
                    "üõçÔ∏è IMPULSSOSTOKSET - 24h harkinta-aika ennen ostoja"
                ],
                "urgency": "moderate"
            })
        
        # Matala s√§√§st√∂taso
        if monthly_savings < 500:
            alerts.append({
                "level": "INFO",
                "title": "üìà S√Ñ√ÑST√ñJ√Ñ PIT√Ñ√Ñ NOSTAA",
                "message": f"Nykyinen s√§√§st√∂ {monthly_savings:.0f}‚Ç¨/kk ei riit√§ 100k‚Ç¨ tavoitteeseen",
                "actions": [
                    "üéØ TAVOITE: Nosta s√§√§st√∂t v√§hint√§√§n ‚Ç¨800/kk",
                    "üíº LIS√ÑTULOT: +‚Ç¨300/kk sivut√∂ist√§",
                    "‚úÇÔ∏è KULUJEN LEIKKAUS: -‚Ç¨200/kk turhista menoista",
                    "üìà SIJOITUSTUOTTO: 5% vuosituotto kiihdytt√§√§ s√§√§st√∂j√§"
                ],
                "urgency": "moderate"
            })
        
        # Positiivinen palaute jos menee hyvin
        if progress_percentage > 70 and realistic_timeline < 5:
            alerts.append({
                "level": "SUCCESS",
                "title": "üéâ LOISTAVAA! Olet tavoitteessa",
                "message": f"Nykyisell√§ tahdilla saavutat 100k‚Ç¨ {realistic_timeline:.1f} vuodessa!",
                "actions": [
                    "üí™ JATKA SAMAAN MALLIIN - S√§√§st√∂tahti on erinomainen",
                    "üìà HARKITSE SIJOITTAMISTA - Kiihdyt√§ kasvua osakkeilla",
                    "üéØ ASETA SEURAAVA TAVOITE - 150k‚Ç¨ tai 200k‚Ç¨?",
                    "üèÜ JUHLI V√ÑLITAVOITTEITA - Ansaitset tunnustuksen!"
                ],
                "urgency": "none"
            })
        
        return alerts
    
    def get_daily_motivation(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        P√§ivitt√§inen motivaatioviesti ja toimenpide-ehdotus.
        """
        analysis = self.analyze_goal_status(user_id, db)
        
        if analysis["status"] != "success":
            return analysis
        
        progress = analysis["progress_percentage"]
        timeline = analysis["realistic_timeline"]
        
        # Valitse p√§iv√§n viesti tilanteen mukaan
        if progress < 30:
            motivation = {
                "mood": "üò§",
                "message": "NOUSE JA PAISTA! 100k‚Ç¨ ei tule itsest√§√§n. T√§n√§√§n etsit lis√§t√∂it√§!",
                "daily_action": "L√§het√§ 3 ty√∂hakemusta tai ota yhteytt√§ verkostoosi lis√§t√∂iden takia",
                "energy_level": "MAXIMUM"
            }
        elif progress < 50:
            motivation = {
                "mood": "üí™", 
                "message": "Tavoite vaatii lis√§ponnisteluita. Joka p√§iv√§ on mahdollisuus s√§√§st√§√§ enemm√§n!",
                "daily_action": "Tarkista t√§m√§n p√§iv√§n kulut ja kysy itselt√§si: Tarvitsenko t√§t√§?",
                "energy_level": "HIGH"
            }
        elif progress < 70:
            motivation = {
                "mood": "üòä",
                "message": "Hyv√§√§ vauhtia! Pienet p√§ivitt√§iset valinnat johtavat suuriin tuloksiin.",
                "daily_action": "S√§√§st√§ t√§n√§√§n v√§hint√§√§n ‚Ç¨10 j√§tt√§m√§ll√§ joku ostos tekem√§tt√§",
                "energy_level": "STEADY"
            }
        else:
            motivation = {
                "mood": "üöÄ",
                "message": "Olet tulessa! 100k‚Ç¨ tavoite on saavutettavissa!",
                "daily_action": "Jatka loistavaa ty√∂t√§si. Harkitse sijoittamista kasvun kiihdytt√§miseksi",
                "energy_level": "CONFIDENT"
            }
        
        return {
            "status": "success",
            "motivation": motivation,
            "progress": progress,
            "days_to_goal": timeline * 365 if timeline != float('inf') else None
        }
    
    def check_spending_anomalies(self, user_id: int, db: Session) -> List[Dict[str, Any]]:
        """
        Tarkista ep√§tavalliset kulutuspikit ja varoita niist√§.
        """
        try:
            # Hae viimeisen 30 p√§iv√§n transaktiot
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            recent_transactions = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_date >= start_date,
                Transaction.amount > 0  # Vain kulut
            ).all()
            
            if not recent_transactions:
                return []
            
            # Laske keskim√§√§r√§inen p√§ivitt√§inen kulutus
            daily_expenses = {}
            for transaction in recent_transactions:
                date_key = transaction.transaction_date.date()
                if date_key not in daily_expenses:
                    daily_expenses[date_key] = 0
                daily_expenses[date_key] += transaction.amount
            
            if not daily_expenses:
                return []
            
            avg_daily_spending = sum(daily_expenses.values()) / len(daily_expenses)
            
            # Etsi poikkeukselliset p√§iv√§t (yli 2x keskiarvo)
            anomalies = []
            for date, amount in daily_expenses.items():
                if amount > avg_daily_spending * 2:
                    anomalies.append({
                        "date": date.isoformat(),
                        "amount": amount,
                        "average": avg_daily_spending,
                        "multiplier": amount / avg_daily_spending,
                        "warning": f"üö® {date.strftime('%d.%m')} kulutit {amount:.0f}‚Ç¨ - {amount/avg_daily_spending:.1f}x normaalia!"
                    })
            
            return sorted(anomalies, key=lambda x: x["multiplier"], reverse=True)
            
        except Exception as e:
            logger.error(f"Virhe kulutusepoikkeusten tarkistuksessa: {e}")
            return []
    
    def generate_emergency_action_plan(self, user_id: int, db: Session) -> Dict[str, Any]:
        """
        Luo h√§t√§tilannetta varten radikaalin toimintasuunnitelman.
        """
        analysis = self.analyze_goal_status(user_id, db)
        
        if analysis["status"] != "success":
            return analysis
        
        current_savings = analysis["current_savings"] 
        monthly_savings = analysis["monthly_savings"]
        timeline = analysis["realistic_timeline"]
        
        # Jos tilanne on kriittinen, luo radikaalit toimenpiteet
        if timeline > 8 or monthly_savings < 300:
            emergency_plan = {
                "status": "EMERGENCY",
                "title": "üö® H√ÑT√ÑTILANNE: 100K‚Ç¨ PELASTUSSUUNNITELMA",
                "immediate_actions": [
                    {
                        "priority": 1,
                        "action": "LIS√ÑTULOT HETI",
                        "details": [
                            "Rekister√∂idy Wolt/Foodora kuljettajaksi (aloita t√§n√§√§n)",
                            "Ilmoita freelance-palveluista LinkedIniss√§",
                            "Myy k√§ytt√§m√§tt√∂m√§t tavarat Tori.fi:ss√§",
                            "Kysy perheelt√§/yst√§vilt√§ lyhytaikaisia t√∂it√§"
                        ],
                        "target": "+‚Ç¨500/kk lis√§tuloja"
                    },
                    {
                        "priority": 2, 
                        "action": "KULUJEN RADIKAALI LEIKKAUS",
                        "details": [
                            "Peruuta KAIKKI ei-v√§ltt√§m√§tt√∂m√§t tilaukset",
                            "Sy√∂ kotona 30 p√§iv√§√§ (ei ravintoloita)",
                            "K√§yt√§ vain julkisia kulkuneuvoja",
                            "Osta vain halvin vaihtoehto kaikesta"
                        ],
                        "target": "-‚Ç¨300/kk kuluja"
                    },
                    {
                        "priority": 3,
                        "action": "SIJOITTAMINEN ALOITETTAVA",
                        "details": [
                            "Avaa sijoitustili Nordeaan/OP:hen",
                            "Aloita ‚Ç¨200/kk indeksirahasto-s√§√§st√§minen", 
                            "Tavoite: 5-7% vuosituotto",
                            "Riskitaso: Keskinkertainen (osakkeet 70%, korot 30%)"
                        ],
                        "target": "Kiihdyt√§ kasvua sijoitustuotoilla"
                    }
                ],
                "timeline_improvement": f"N√§ill√§ toimilla tavoite {timeline:.1f} vuodesta ‚Üí ~5-6 vuoteen",
                "monthly_target": "‚Ç¨800-1000/kk s√§√§st√∂t",
                "success_probability": "85% onnistumistodenn√§k√∂isyys"
            }
        else:
            emergency_plan = {
                "status": "OPTIMIZATION",
                "title": "‚ö° OPTIMOINTISUUNNITELMA",
                "message": "Tilanne ei ole kriittinen, mutta voidaan nopeuttaa tavoitetta"
            }
        
        return emergency_plan 