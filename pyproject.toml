[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sentinel-100k"
version = "2.0.0"
description = "AI-powered personal finance management system for â‚¬100,000 savings goal"
authors = [
    {name = "Sentinel 100K Team", email = "dev@sentinel100k.fi"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.0",
    "streamlit>=1.28.0",
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "python-jose>=3.3.0",
    "python-multipart>=0.0.6",
    "passlib>=1.7.4",
    "bcrypt>=4.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pre-commit>=3.4.0",
    "locust>=2.17.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | __pycache__
    | venv
    | env
)/
'''

[tool.flake8]
max-line-length = 88
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "env",
    ".venv",
    ".env",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by other tools)
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "openai.*",
    "sqlalchemy.*",
    "jose.*",
    "passlib.*",
    "bcrypt.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests", "personal_finance_agent/tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--cov=personal_finance_agent",
    "--cov=sentinel_render_enhanced",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing",
    "--cov-fail-under=70",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI/OpenAI API",
    "db: marks tests that require database",
    "api: marks tests for API endpoints",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:sqlalchemy.*",
    "ignore::UserWarning:streamlit.*",
]

[tool.coverage.run]
source = ["personal_finance_agent", "sentinel_render_enhanced"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv", ".env"]
skips = ["B101", "B601"]  # Skip assert statements and shell injection (paramiko)

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"] 