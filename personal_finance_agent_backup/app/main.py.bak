"""
Personal Finance Agent - Main FastAPI Application

A comprehensive personal finance management system with AI-powered insights,
document processing, and automated categorization.
"""
from fastapi import FastAPI, Request, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer
from contextlib import asynccontextmanager
from sqlalchemy.orm import Session
import logging
import time
import uuid
import json
from datetime import datetime

from app.core.config import settings
from app.db.init_db import init_db, get_db, engine, Base
from app.services.scheduler_service import scheduler_service
from app.services.request_logging import RequestLoggingMiddleware, request_logging_service
from app.services.circuit_breaker import openai_circuit_breaker, guardian_circuit_breaker, ocr_circuit_breaker
from app.services.graceful_degradation import graceful_degradation
from app.services.jinja_prompt_service import jinja_prompt_service
from app.api.health_checks import router as health_router

# Import Master Plan features
from app.services.security_headers import SecurityHeadersMiddleware, CSRFProtectionMiddleware
from app.services.api_metrics import APIMetricsMiddleware, api_metrics_service
from app.services.input_validation import InputValidationMiddleware, input_validation_service
from app.services.rate_limiting import RateLimitingMiddleware, rate_limiting_service

# Import API routers
from app.api import auth, transactions, categories, dashboard, analytics, guardian, advanced_intelligence, mock_gpt, personality, multichannel, prompt_engine, master_features
# Temporarily disabled: job_agent, gamification, documents
from app.api.guardian import router as guardian_router
from app.api.advanced_intelligence import router as advanced_intelligence_router
from app.api.mock_gpt import router as mock_gpt_router
from app.api.personality import router as personality_router
from app.api.multichannel import router as multichannel_router
from app.api.prompt_engine import router as prompt_engine_router
from app.api.master_features import router as master_features_router

# Luo tietokantataulut
Base.metadata.create_all(bind=engine)

# Configure structured logging (Master-suunnitelma feature)
class StructuredFormatter(logging.Formatter):
    """JSON structured logging formatter"""
    
    def format(self, record):
        log_entry = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": record.levelname,
            "service_name": "personal_finance_agent",
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        
        # Add correlation ID if available
        if hasattr(record, 'correlation_id'):
            log_entry["correlation_id"] = record.correlation_id
            
        # Add extra fields
        if hasattr(record, 'user_id'):
            log_entry["user_id"] = record.user_id
            
        if hasattr(record, 'request_id'):
            log_entry["request_id"] = record.request_id
            
        return json.dumps(log_entry, ensure_ascii=False)

# Configure logging with structured format
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("app.log", encoding='utf-8')
    ]
)

# Add structured formatter for file handler
file_handler = logging.FileHandler("structured.log", encoding='utf-8')
file_handler.setFormatter(StructuredFormatter())
logging.getLogger().addHandler(file_handler)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan manager.
    Handles startup and shutdown tasks.
    """
    # Startup
    logger.info("Starting Personal Finance Agent...")
    
    try:
        # Initialize database
        logger.info("Initializing database...")
        init_db()
        
        # Start scheduler service
        logger.info("Starting scheduler service...")
        # await scheduler_service.start()  # Temporarily disabled
        logger.info("Scheduler service disabled temporarily")
        
        logger.info("Application startup completed successfully")
        
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("Shutting down Personal Finance Agent...")
    
    try:
        # Stop scheduler service
        # await scheduler_service.stop()  # Temporarily disabled
        logger.info("Scheduler service stopped")
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    
    logger.info("Application shutdown completed")


# Create FastAPI application
app = FastAPI(
    title="Personal Finance Agent API",
    description="Älykkäs henkilökohtainen talousagentti 100k€ tavoitteen saavuttamiseksi",
    version="2.0.0",
    lifespan=lifespan
)

# Add middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, restrict to specific domains
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.allowed_hosts
)

# Add Master Plan middlewares
app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(CSRFProtectionMiddleware, exempt_paths=["/docs", "/openapi.json", "/health", "/api/v1/health", "/api/v1/master-features"])
app.add_middleware(APIMetricsMiddleware, metrics_service=api_metrics_service)
app.add_middleware(InputValidationMiddleware, validation_service=input_validation_service)
app.add_middleware(RateLimitingMiddleware, rate_limiting_service=rate_limiting_service)

# Add Request Logging Middleware (Master-suunnitelma feature)
app.add_middleware(RequestLoggingMiddleware, logging_service=request_logging_service)

# Add correlation ID middleware (Master-suunnitelma ominaisuus)
@app.middleware("http")
async def correlation_id_middleware(request: Request, call_next):
    """Add correlation ID to all requests and logs (Master-suunnitelma feature)."""
    # Get or generate correlation ID
    correlation_id = request.headers.get("X-Correlation-ID", str(uuid.uuid4()))
    
    # Add to request state for access in endpoints
    request.state.correlation_id = correlation_id
    
    # Process request
    response = await call_next(request)
    
    # Add correlation ID to response headers
    response.headers["X-Correlation-ID"] = correlation_id
    
    return response


# Add request timing middleware
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    """Add request processing time to response headers."""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(f"{process_time:.4f}")
    return response


# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handle unexpected exceptions globally."""
    logger.error(f"Unhandled exception on {request.method} {request.url}: {exc}", exc_info=True)
    
    if isinstance(exc, HTTPException):
        return JSONResponse(
            status_code=exc.status_code,
            content={"detail": exc.detail}
        )
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
        }
    )


# Include API routers
app.include_router(auth.router, prefix="/api/v1")
app.include_router(transactions.router, prefix="/api/v1")
app.include_router(categories.router, prefix="/api/v1")
app.include_router(dashboard.router, prefix="/api/v1")
# app.include_router(documents.router, prefix="/api/v1")  # Temporarily disabled
app.include_router(analytics.router, prefix="/api/v1")
app.include_router(guardian_router, prefix="/api/v1")
app.include_router(advanced_intelligence_router, prefix="/api/v1")
app.include_router(mock_gpt_router, prefix="/api/v1")
app.include_router(prompt_engine_router, prefix="/api/v1")
app.include_router(personality_router, prefix="/api/v1")
app.include_router(multichannel_router, prefix="/api/v1")
app.include_router(master_features_router, prefix="/api/v1")
app.include_router(health_router)


# Root endpoint
@app.get("/")
async def root():
    """API root endpoint"""
    return {
        "message": "Personal Finance Agent API",
        "version": "2.0.0",
        "status": "running",
        "features": [
            "Authentication & User Management",
            "Transaction Management", 
            "Category Management",
            "Dashboard Analytics",
            "Document Processing",
            "Sentinel Guardian™",
            "Sentinel Learning Engine™",
            "Income Stream Intelligence™",
            "Liabilities Insight™",
            "Idea Engine™"
        ]
    }


# Health check endpoint
@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": "2024-01-01T00:00:00Z",
        "version": "2.0.0"
    }


# API information endpoint
@app.get("/api/info", tags=["info"])
async def api_info():
    """
    Get API information and available endpoints.
    """
    return {
        "name": settings.app_name,
        "version": settings.version,
        "description": "Personal Finance Agent API",
        "endpoints": {
            "authentication": "/api/v1/auth",
            "documents": "/api/v1/documents",
            "transactions": "/api/v1/transactions",
            "categories": "/api/v1/categories",
            "dashboard": "/api/v1/dashboard",
            "analytics": "/api/v1/analytics",
            "guardian": "/api/v1/guardian",
            "intelligence": "/api/v1/intelligence",
            "mock_gpt": "/api/v1/mock-gpt",
            "watchdog": "/api/v1/watchdog",
            "personality": "/api/v1/personality",
            "multichannel": "/api/v1/multichannel",
            "gamification": "/api/v1/gamification"
        },
        "features": [
            "JWT Authentication",
            "Document OCR Processing",
            "AI Transaction Categorization",
            "Financial Analytics Dashboard",
            "Goal Tracking",
            "Smart Insights",
            "AI Personality System",
            "Multichannel Notifications",
            "Gamification & Achievements",
            "Finnish Localization"
        ],
        "documentation": {
            "interactive": "/docs",
            "openapi_schema": "/openapi.json"
        }
    }


@app.get("/api/v1/status")
async def api_status():
    """API status endpoint"""
    return {
        "status": "operational",
        "services": {
            "authentication": "active",
            "transactions": "active", 
            "categories": "active",
            "dashboard": "active",
            "documents": "active",
            "analytics": "active",
            "guardian": "active",
            "advanced_intelligence": "active"
        },
        "database": "connected",
        "version": "2.0.0"
    }


if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"Starting {settings.app_name} v{settings.version}")
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level="info" if not settings.debug else "debug"
    )
